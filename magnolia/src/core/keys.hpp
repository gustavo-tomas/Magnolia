#pragma once

#include <SDL.h>

#include "core/types.hpp"

namespace mag
{
    // @NOTE: not all keys are mapped. We probably wont need them.
    // Key mappings
    typedef enum class Keys : u64
    {
        Unknown = SDLK_UNKNOWN,
        Return = SDLK_RETURN,
        Enter = Return,
        Escape = SDLK_ESCAPE,
        Backspace = SDLK_BACKSPACE,
        Tab = SDLK_TAB,
        Space = SDLK_SPACE,
        Exclaim = SDLK_EXCLAIM,
        Quotedbl = SDLK_QUOTEDBL,
        Hash = SDLK_HASH,
        Percent = SDLK_PERCENT,
        Dollar = SDLK_DOLLAR,
        Ampersand = SDLK_AMPERSAND,
        Quote = SDLK_QUOTE,
        Leftparen = SDLK_LEFTPAREN,
        Rightparen = SDLK_RIGHTPAREN,
        Asterisk = SDLK_ASTERISK,
        Plus = SDLK_PLUS,
        Comma = SDLK_COMMA,
        Minus = SDLK_MINUS,
        Period = SDLK_PERIOD,
        Slash = SDLK_SLASH,
        _0 = SDLK_0,
        _1 = SDLK_1,
        _2 = SDLK_2,
        _3 = SDLK_3,
        _4 = SDLK_4,
        _5 = SDLK_5,
        _6 = SDLK_6,
        _7 = SDLK_7,
        _8 = SDLK_8,
        _9 = SDLK_9,
        Colon = SDLK_COLON,
        Semicolon = SDLK_SEMICOLON,
        Less = SDLK_LESS,
        Equals = SDLK_EQUALS,
        Greater = SDLK_GREATER,
        Question = SDLK_QUESTION,
        At = SDLK_AT,

        /*
            Skip uppercase letters
        */

        Leftbracket = SDLK_LEFTBRACKET,
        Backslash = SDLK_BACKSLASH,
        Rightbracket = SDLK_RIGHTBRACKET,
        Caret = SDLK_CARET,
        Underscore = SDLK_UNDERSCORE,
        Backquote = SDLK_BACKQUOTE,
        a = SDLK_a,
        b = SDLK_b,
        c = SDLK_c,
        d = SDLK_d,
        e = SDLK_e,
        f = SDLK_f,
        g = SDLK_g,
        h = SDLK_h,
        i = SDLK_i,
        j = SDLK_j,
        k = SDLK_k,
        l = SDLK_l,
        m = SDLK_m,
        n = SDLK_n,
        o = SDLK_o,
        p = SDLK_p,
        q = SDLK_q,
        r = SDLK_r,
        s = SDLK_s,
        t = SDLK_t,
        u = SDLK_u,
        v = SDLK_v,
        w = SDLK_w,
        x = SDLK_x,
        y = SDLK_y,
        z = SDLK_z,

        Capslock = SDLK_CAPSLOCK,

        F1 = SDLK_F1,
        F2 = SDLK_F2,
        F3 = SDLK_F3,
        F4 = SDLK_F4,
        F5 = SDLK_F5,
        F6 = SDLK_F6,
        F7 = SDLK_F7,
        F8 = SDLK_F8,
        F9 = SDLK_F9,
        F10 = SDLK_F10,
        F11 = SDLK_F11,
        F12 = SDLK_F12,

        Printscreen = SDLK_PRINTSCREEN,
        Scrolllock = SDLK_SCROLLLOCK,
        Pause = SDLK_PAUSE,
        Insert = SDLK_INSERT,
        Home = SDLK_HOME,
        Pageup = SDLK_PAGEUP,
        Delete = SDLK_DELETE,
        End = SDLK_END,
        Pagedown = SDLK_PAGEDOWN,
        Right = SDLK_RIGHT,
        Left = SDLK_LEFT,
        Down = SDLK_DOWN,
        Up = SDLK_UP,

        Numlockclear = SDLK_NUMLOCKCLEAR,
        Kp_divide = SDLK_KP_DIVIDE,
        Kp_multiply = SDLK_KP_MULTIPLY,
        Kp_minus = SDLK_KP_MINUS,
        Kp_plus = SDLK_KP_PLUS,
        Kp_enter = SDLK_KP_ENTER,
        Kp_1 = SDLK_KP_1,
        Kp_2 = SDLK_KP_2,
        Kp_3 = SDLK_KP_3,
        Kp_4 = SDLK_KP_4,
        Kp_5 = SDLK_KP_5,
        Kp_6 = SDLK_KP_6,
        Kp_7 = SDLK_KP_7,
        Kp_8 = SDLK_KP_8,
        Kp_9 = SDLK_KP_9,
        Kp_0 = SDLK_KP_0,
        Kp_period = SDLK_KP_PERIOD,

        Application = SDLK_APPLICATION,
        Power = SDLK_POWER,
        Kp_equals = SDLK_KP_EQUALS,
        F13 = SDLK_F13,
        F14 = SDLK_F14,
        F15 = SDLK_F15,
        F16 = SDLK_F16,
        F17 = SDLK_F17,
        F18 = SDLK_F18,
        F19 = SDLK_F19,
        F20 = SDLK_F20,
        F21 = SDLK_F21,
        F22 = SDLK_F22,
        F23 = SDLK_F23,
        F24 = SDLK_F24,
        Execute = SDLK_EXECUTE,
        Help = SDLK_HELP,
        Menu = SDLK_MENU,
        Select = SDLK_SELECT,
        Stop = SDLK_STOP,
        Again = SDLK_AGAIN,
        Undo = SDLK_UNDO,
        Cut = SDLK_CUT,
        Copy = SDLK_COPY,
        Paste = SDLK_PASTE,
        Find = SDLK_FIND,
        Mute = SDLK_MUTE,
        Volumeup = SDLK_VOLUMEUP,
        Volumedown = SDLK_VOLUMEDOWN,
        Kp_comma = SDLK_KP_COMMA,
        Kp_equalsas400 = SDLK_KP_EQUALSAS400,

        Alterase = SDLK_ALTERASE,
        Sysreq = SDLK_SYSREQ,
        Cancel = SDLK_CANCEL,
        Clear = SDLK_CLEAR,
        Prior = SDLK_PRIOR,
        Return2 = SDLK_RETURN2,
        Separator = SDLK_SEPARATOR,
        Out = SDLK_OUT,
        Oper = SDLK_OPER,
        Clearagain = SDLK_CLEARAGAIN,
        Crsel = SDLK_CRSEL,
        Exsel = SDLK_EXSEL,

        Kp_00 = SDLK_KP_00,
        Kp_000 = SDLK_KP_000,
        Thousandsseparator = SDLK_THOUSANDSSEPARATOR,
        Decimalseparator = SDLK_DECIMALSEPARATOR,
        Currencyunit = SDLK_CURRENCYUNIT,
        Currencysubunit = SDLK_CURRENCYSUBUNIT,
        Kp_leftparen = SDLK_KP_LEFTPAREN,
        Kp_rightparen = SDLK_KP_RIGHTPAREN,
        Kp_leftbrace = SDLK_KP_LEFTBRACE,
        Kp_rightbrace = SDLK_KP_RIGHTBRACE,
        Kp_tab = SDLK_KP_TAB,
        Kp_backspace = SDLK_KP_BACKSPACE,
        Kp_a = SDLK_KP_A,
        Kp_b = SDLK_KP_B,
        Kp_c = SDLK_KP_C,
        Kp_d = SDLK_KP_D,
        Kp_e = SDLK_KP_E,
        Kp_f = SDLK_KP_F,
        Kp_xor = SDLK_KP_XOR,
        Kp_power = SDLK_KP_POWER,
        Kp_percent = SDLK_KP_PERCENT,
        Kp_less = SDLK_KP_LESS,
        Kp_greater = SDLK_KP_GREATER,
        Kp_ampersand = SDLK_KP_AMPERSAND,
        Kp_dblampersand = SDLK_KP_DBLAMPERSAND,
        Kp_verticalbar = SDLK_KP_VERTICALBAR,
        Kp_dblverticalbar = SDLK_KP_DBLVERTICALBAR,
        Kp_colon = SDLK_KP_COLON,
        Kp_hash = SDLK_KP_HASH,
        Kp_space = SDLK_KP_SPACE,
        Kp_at = SDLK_KP_AT,
        Kp_exclam = SDLK_KP_EXCLAM,
        Kp_memstore = SDLK_KP_MEMSTORE,
        Kp_memrecall = SDLK_KP_MEMRECALL,
        Kp_memclear = SDLK_KP_MEMCLEAR,
        Kp_memadd = SDLK_KP_MEMADD,
        Kp_memsubtract = SDLK_KP_MEMSUBTRACT,
        Kp_memmultiply = SDLK_KP_MEMMULTIPLY,
        Kp_memdivide = SDLK_KP_MEMDIVIDE,
        Kp_plusminus = SDLK_KP_PLUSMINUS,
        Kp_clear = SDLK_KP_CLEAR,
        Kp_clearentry = SDLK_KP_CLEARENTRY,
        Kp_binary = SDLK_KP_BINARY,
        Kp_octal = SDLK_KP_OCTAL,
        Kp_decimal = SDLK_KP_DECIMAL,
        Kp_hexadecimal = SDLK_KP_HEXADECIMAL,

        Lctrl = SDLK_LCTRL,
        Lshift = SDLK_LSHIFT,
        Lalt = SDLK_LALT,
        Lgui = SDLK_LGUI,
        Rctrl = SDLK_RCTRL,
        Rshift = SDLK_RSHIFT,
        Ralt = SDLK_RALT,
        Rgui = SDLK_RGUI,

        Mode = SDLK_MODE,

        Audionext = SDLK_AUDIONEXT,
        Audioprev = SDLK_AUDIOPREV,
        Audiostop = SDLK_AUDIOSTOP,
        Audioplay = SDLK_AUDIOPLAY,
        Audiomute = SDLK_AUDIOMUTE,
        Mediaselect = SDLK_MEDIASELECT,
        Www = SDLK_WWW,
        Mail = SDLK_MAIL,
        Calculator = SDLK_CALCULATOR,
        Computer = SDLK_COMPUTER,
        Ac_search = SDLK_AC_SEARCH,
        Ac_home = SDLK_AC_HOME,
        Ac_back = SDLK_AC_BACK,
        Ac_forward = SDLK_AC_FORWARD,
        Ac_stop = SDLK_AC_STOP,
        Ac_refresh = SDLK_AC_REFRESH,
        Ac_bookmarks = SDLK_AC_BOOKMARKS,

        Brightnessdown = SDLK_BRIGHTNESSDOWN,
        Brightnessup = SDLK_BRIGHTNESSUP,
        Displayswitch = SDLK_DISPLAYSWITCH,
        Kbdillumtoggle = SDLK_KBDILLUMTOGGLE,
        Kbdillumdown = SDLK_KBDILLUMDOWN,
        Kbdillumup = SDLK_KBDILLUMUP,
        Eject = SDLK_EJECT,
        Sleep = SDLK_SLEEP,
        App1 = SDLK_APP1
    } Key;

    typedef enum class Buttons : u64
    {
        Left = SDL_BUTTON_LEFT,
        Middle = SDL_BUTTON_MIDDLE,
        Right = SDL_BUTTON_RIGHT,
        X1 = SDL_BUTTON_X1,
        X2 = SDL_BUTTON_X2
    } Button;
};  // namespace mag
